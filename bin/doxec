#!/usr/bin/env python3

import argparse
import doxec
import sys

if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="""
        Run code examples written in a documentation file to ensure the
        validity of the examples.
        """)

    parser.add_argument("--syntax", choices=doxec.parser.keys(),
        default="markdown",
        help="The syntax parser to be used for the listed files.")

    parser.add_argument("--version", action="store_true",
        help="Prints the version of the doxec package and exits.")

    parser.add_argument("--short", action="store_true",
        help="Suppresses the standard output of operations.")

    parser.add_argument("documents", metavar="DOCUMENT", nargs="+", default=[],
        help="A document from which the code examples should be parsed and "
            "executed")

    args = parser.parse_args()

    if args.version:
        print("Doxec package version: %s" % doxec.__version__) 
        sys.exit(0)

    parser = doxec.parser[args.syntax]

    print("Doxec -- Copyright (c) 2017 Frank Sauerburger")

    # Loop over documents
    for doc_path in args.documents:
        doc = doxec.Document(doc_path, syntax=parser)
        monitor = doxec.Monitor(doc_path, short=args.short)
        doc.run(monitor=monitor)

    # Print summary
    print("-"*80)
    color = "\033[31m" if monitor.fail_count > 0 else "\033[32m"

    print(color + "Failed: %5d\033[0m" % monitor.fail_count)
    print("Total:  %5d" % monitor.total_count)

    # Return code equals number of failed operations
    sys.exit(monitor.fail_count)
